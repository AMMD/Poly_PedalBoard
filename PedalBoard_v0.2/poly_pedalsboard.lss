
poly_pedalsboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000009fc  00000a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800120  00800120  00000ab0  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000090  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000117  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009a5  00000000  00000000  0000135f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003a7  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000da8  00000000  00000000  000020ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00002e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000033b  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d99  00000000  00000000  0000324f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00003fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}


// receive a packet, with timeout
int8_t usb_rawhid_recv(uint8_t *buffer, uint8_t timeout)
{
   0:	c0 c0       	rjmp	.+384    	; 0x182 <__ctors_end>
   2:	00 00       	nop
   4:	d9 c0       	rjmp	.+434    	; 0x1b8 <__bad_interrupt>
   6:	00 00       	nop
   8:	d7 c0       	rjmp	.+430    	; 0x1b8 <__bad_interrupt>
   a:	00 00       	nop
   c:	d5 c0       	rjmp	.+426    	; 0x1b8 <__bad_interrupt>
   e:	00 00       	nop
  10:	d3 c0       	rjmp	.+422    	; 0x1b8 <__bad_interrupt>
  12:	00 00       	nop
  14:	d1 c0       	rjmp	.+418    	; 0x1b8 <__bad_interrupt>
  16:	00 00       	nop
  18:	cf c0       	rjmp	.+414    	; 0x1b8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	cd c0       	rjmp	.+410    	; 0x1b8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	cb c0       	rjmp	.+406    	; 0x1b8 <__bad_interrupt>
  22:	00 00       	nop
  24:	c9 c0       	rjmp	.+402    	; 0x1b8 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c3       	rjmp	.+1660   	; 0x6a6 <__vector_10>
  2a:	00 00       	nop
  2c:	74 c3       	rjmp	.+1768   	; 0x716 <__vector_11>
  2e:	00 00       	nop
  30:	c3 c0       	rjmp	.+390    	; 0x1b8 <__bad_interrupt>
  32:	00 00       	nop
  34:	c1 c0       	rjmp	.+386    	; 0x1b8 <__bad_interrupt>
  36:	00 00       	nop
  38:	bf c0       	rjmp	.+382    	; 0x1b8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	bd c0       	rjmp	.+378    	; 0x1b8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	bb c0       	rjmp	.+374    	; 0x1b8 <__bad_interrupt>
  42:	00 00       	nop
  44:	b9 c0       	rjmp	.+370    	; 0x1b8 <__bad_interrupt>
  46:	00 00       	nop
  48:	b7 c0       	rjmp	.+366    	; 0x1b8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b5 c0       	rjmp	.+362    	; 0x1b8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b3 c0       	rjmp	.+358    	; 0x1b8 <__bad_interrupt>
  52:	00 00       	nop
  54:	b1 c0       	rjmp	.+354    	; 0x1b8 <__bad_interrupt>
  56:	00 00       	nop
  58:	af c0       	rjmp	.+350    	; 0x1b8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ae c0       	rjmp	.+348    	; 0x1ba <__vector_23>
  5e:	00 00       	nop
  60:	ab c0       	rjmp	.+342    	; 0x1b8 <__bad_interrupt>
  62:	00 00       	nop
  64:	a9 c0       	rjmp	.+338    	; 0x1b8 <__bad_interrupt>
  66:	00 00       	nop
  68:	a7 c0       	rjmp	.+334    	; 0x1b8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a5 c0       	rjmp	.+330    	; 0x1b8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a3 c0       	rjmp	.+326    	; 0x1b8 <__bad_interrupt>
  72:	00 00       	nop
  74:	a1 c0       	rjmp	.+322    	; 0x1b8 <__bad_interrupt>
  76:	00 00       	nop
  78:	9f c0       	rjmp	.+318    	; 0x1b8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	9d c0       	rjmp	.+314    	; 0x1b8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	9b c0       	rjmp	.+310    	; 0x1b8 <__bad_interrupt>
  82:	00 00       	nop
  84:	99 c0       	rjmp	.+306    	; 0x1b8 <__bad_interrupt>
  86:	00 00       	nop
  88:	97 c0       	rjmp	.+302    	; 0x1b8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	95 c0       	rjmp	.+298    	; 0x1b8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	93 c0       	rjmp	.+294    	; 0x1b8 <__bad_interrupt>
  92:	00 00       	nop
  94:	91 c0       	rjmp	.+290    	; 0x1b8 <__bad_interrupt>
  96:	00 00       	nop
  98:	8f c0       	rjmp	.+286    	; 0x1b8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	8d c0       	rjmp	.+282    	; 0x1b8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	8b c0       	rjmp	.+278    	; 0x1b8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	89 c0       	rjmp	.+274    	; 0x1b8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	87 c0       	rjmp	.+270    	; 0x1b8 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <descriptor_list>:
  ac:	00 01 00 00 e5 00 12 00 02 00 00 f7 00 29 00 22     .............)."
  bc:	00 00 20 01 1c 00 21 00 00 09 01 09 00 03 00 00     .. ...!.........
  cc:	3c 01 04 01 03 09 04 40 01 10 02 03 09 04 52 01     <......@......R.
  dc:	2e                                                  .

000000dd <endpoint_config_table>:
  dd:	01 c1 36 01 c0 36 00 00                             ..6..6..

000000e5 <device_descriptor>:
  e5:	12 01 00 02 00 00 00 20 c0 16 80 04 00 01 01 02     ....... ........
  f5:	00 01                                               ..

000000f7 <config1_descriptor>:
  f7:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 00     ..).....2.......
 107:	00 00 09 21 11 01 00 01 22 1c 00 07 05 81 03 40     ...!...."......@
 117:	00 02 07 05 02 03 40 00 08                          ......@..

00000120 <rawhid_hid_report_desc>:
 120:	06 ab ff 0a 00 02 a1 01 75 08 15 00 26 ff 00 95     ........u...&...
 130:	40 09 01 81 02 95 40 09 02 91 02 c0                 @.....@.....

0000013c <string0>:
 13c:	04 03 09 04                                         ....

00000140 <string1>:
 140:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 150:	00 00                                               ..

00000152 <string2>:
 152:	2e 03 54 00 65 00 65 00 6e 00 73 00 79 00 20 00     ..T.e.e.n.s.y. .
 162:	52 00 61 00 77 00 20 00 48 00 49 00 44 00 20 00     R.a.w. .H.I.D. .
 172:	45 00 78 00 61 00 6d 00 70 00 6c 00 65 00 00 00     E.x.a.m.p.l.e...

00000182 <__ctors_end>:
 182:	11 24       	eor	r1, r1
 184:	1f be       	out	0x3f, r1	; 63
 186:	cf ef       	ldi	r28, 0xFF	; 255
 188:	da e0       	ldi	r29, 0x0A	; 10
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	cd bf       	out	0x3d, r28	; 61

0000018e <__do_copy_data>:
 18e:	11 e0       	ldi	r17, 0x01	; 1
 190:	a0 e0       	ldi	r26, 0x00	; 0
 192:	b1 e0       	ldi	r27, 0x01	; 1
 194:	ec ef       	ldi	r30, 0xFC	; 252
 196:	f9 e0       	ldi	r31, 0x09	; 9
 198:	02 c0       	rjmp	.+4      	; 0x19e <.do_copy_data_start>

0000019a <.do_copy_data_loop>:
 19a:	05 90       	lpm	r0, Z+
 19c:	0d 92       	st	X+, r0

0000019e <.do_copy_data_start>:
 19e:	a0 32       	cpi	r26, 0x20	; 32
 1a0:	b1 07       	cpc	r27, r17
 1a2:	d9 f7       	brne	.-10     	; 0x19a <.do_copy_data_loop>

000001a4 <__do_clear_bss>:
 1a4:	11 e0       	ldi	r17, 0x01	; 1
 1a6:	a0 e2       	ldi	r26, 0x20	; 32
 1a8:	b1 e0       	ldi	r27, 0x01	; 1
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <.do_clear_bss_start>

000001ac <.do_clear_bss_loop>:
 1ac:	1d 92       	st	X+, r1

000001ae <.do_clear_bss_start>:
 1ae:	a5 36       	cpi	r26, 0x65	; 101
 1b0:	b1 07       	cpc	r27, r17
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <.do_clear_bss_loop>
 1b4:	13 d0       	rcall	.+38     	; 0x1dc <main>
 1b6:	20 c4       	rjmp	.+2112   	; 0x9f8 <_exit>

000001b8 <__bad_interrupt>:
 1b8:	23 cf       	rjmp	.-442    	; 0x0 <__vectors>

000001ba <__vector_23>:
	}
}

// This interrupt routine is run approx 61 times per second.
ISR(TIMER0_OVF_vect)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
  static uint8_t count=0;
  if(++count > -1){
    count = 0;
 1c6:	10 92 21 01 	sts	0x0121, r1
    do_output = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 20 01 	sts	0x0120, r24
  }
}
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <main>:
uint8_t c[8] = {-1, -1, -1, -1, -1, -1, 9, 10};
uint8_t d[8] = {5, 6, 7, 8, 22, 11, 23, 12};
uint8_t f[8] = {21, 20, -1, -1,  19, 18, 17, 16};

int main(void)
{
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
	int8_t r;
	uint8_t i;
	uint16_t val, count=0;

	// set for 16 MHz clock
	CPU_PRESCALE(0);
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	80 93 61 00 	sts	0x0061, r24
 1ec:	10 92 61 00 	sts	0x0061, r1

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	usb_init();
 1f0:	be d0       	rcall	.+380    	; 0x36e <usb_init>
	while (!usb_configured()) /* wait */ ;
 1f2:	d4 d0       	rcall	.+424    	; 0x39c <usb_configured>
 1f4:	88 23       	and	r24, r24
 1f6:	e9 f3       	breq	.-6      	; 0x1f2 <main+0x16>
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1fc:	20 e9       	ldi	r18, 0x90	; 144
 1fe:	31 e0       	ldi	r19, 0x01	; 1
 200:	f9 01       	movw	r30, r18
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 208:	d9 f7       	brne	.-10     	; 0x200 <main+0x24>
	// and do whatever it does to actually be ready for input
	_delay_ms(1000);

        // Configure timer 0 to generate a timer overflow interrupt every
        // 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
        TCCR0A = 0x00;
 20a:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0x05;
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	85 bd       	out	0x25, r24	; 37
        TIMSK0 = (1<<TOIE0);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 6e 00 	sts	0x006E, r24

	// Set all pins to inputs with pull up resistor
	DDRD = 0x00;
 216:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0x00;
 218:	17 b8       	out	0x07, r1	; 7
	DDRB = 0x00;
 21a:	14 b8       	out	0x04, r1	; 4
	DDRF = 0x00;
 21c:	10 ba       	out	0x10, r1	; 16
	
	PORTB = 0xFF;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
 222:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
 224:	8b b9       	out	0x0b, r24	; 11
	PORTF = 0xFF;
 226:	81 bb       	out	0x11, r24	; 17
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	d0 e0       	ldi	r29, 0x00	; 0
		}*/
		// if time to send output, transmit something interesting
		if (do_output) {
			do_output = 0;
			// send a packet, first 2 bytes 0xABCD
			buffer[0] = 0xAB;
 22c:	1b ea       	ldi	r17, 0xAB	; 171
 22e:	f1 2e       	mov	r15, r17
			buffer[1] = 0xCD;
 230:	0d ec       	ldi	r16, 0xCD	; 205
			  
			  // valeur de pin digital
			  if(PINB & (1<<i))
			    buffer[b[i]*2+3] = 0;
			  else 
			    buffer[b[i]*2+3] = 1;
 232:	11 e0       	ldi	r17, 0x01	; 1
			DDRD = 0x0F;
			PORTD = (PORTD & 0xF0) | (buffer[0] & 0x0F);
			// ignore the other 63.5 bytes....
		}*/
		// if time to send output, transmit something interesting
		if (do_output) {
 234:	80 91 20 01 	lds	r24, 0x0120
 238:	88 23       	and	r24, r24
 23a:	e1 f3       	breq	.-8      	; 0x234 <main+0x58>
			do_output = 0;
 23c:	10 92 20 01 	sts	0x0120, r1
			// send a packet, first 2 bytes 0xABCD
			buffer[0] = 0xAB;
 240:	f0 92 25 01 	sts	0x0125, r15
			buffer[1] = 0xCD;
 244:	00 93 26 01 	sts	0x0126, r16
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	64 2f       	mov	r22, r20
			for (i=0; i<8 ; i++) {
			    //			    val = analogRead(i);
			  

			  // Pin B
			  buffer[b[i]*2+2] = b[i]+1;
 24e:	fa 01       	movw	r30, r20
 250:	e0 50       	subi	r30, 0x00	; 0
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	80 81       	ld	r24, Z
 256:	28 2f       	mov	r18, r24
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	f9 01       	movw	r30, r18
 260:	e9 5d       	subi	r30, 0xD9	; 217
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 83       	st	Z, r24
			  
			  // valeur de pin digital
			  if(PINB & (1<<i))
 268:	83 b1       	in	r24, 0x03	; 3
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	04 2e       	mov	r0, r20
 26e:	02 c0       	rjmp	.+4      	; 0x274 <main+0x98>
 270:	95 95       	asr	r25
 272:	87 95       	ror	r24
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <main+0x94>
 278:	f9 01       	movw	r30, r18
 27a:	80 ff       	sbrs	r24, 0
 27c:	04 c0       	rjmp	.+8      	; 0x286 <main+0xaa>
			    buffer[b[i]*2+3] = 0;
 27e:	eb 5d       	subi	r30, 0xDB	; 219
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	13 82       	std	Z+3, r1	; 0x03
 284:	03 c0       	rjmp	.+6      	; 0x28c <main+0xb0>
			  else 
			    buffer[b[i]*2+3] = 1;
 286:	eb 5d       	subi	r30, 0xDB	; 219
 288:	fe 4f       	sbci	r31, 0xFE	; 254
 28a:	13 83       	std	Z+3, r17	; 0x03


			  // Pin C
			  if(c[i] != -1) {
			    buffer[c[i]*2+2] = c[i]+1;
 28c:	fa 01       	movw	r30, r20
 28e:	e8 5f       	subi	r30, 0xF8	; 248
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	80 81       	ld	r24, Z
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	f9 01       	movw	r30, r18
 29e:	e9 5d       	subi	r30, 0xD9	; 217
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 83       	st	Z, r24

			    // valeur de pin digital
			    if(PINC & (1<<i))
 2a6:	86 b1       	in	r24, 0x06	; 6
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	06 2e       	mov	r0, r22
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <main+0xd6>
 2ae:	95 95       	asr	r25
 2b0:	87 95       	ror	r24
 2b2:	0a 94       	dec	r0
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <main+0xd2>
 2b6:	f9 01       	movw	r30, r18
 2b8:	80 ff       	sbrs	r24, 0
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <main+0xe8>
			      buffer[c[i]*2+3] = 0;
 2bc:	eb 5d       	subi	r30, 0xDB	; 219
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	13 82       	std	Z+3, r1	; 0x03
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <main+0xee>
			    else 
			      buffer[c[i]*2+3] = 1;
 2c4:	eb 5d       	subi	r30, 0xDB	; 219
 2c6:	fe 4f       	sbci	r31, 0xFE	; 254
 2c8:	13 83       	std	Z+3, r17	; 0x03
			  }

			  // Pin D
			  if (d[i] != -1) {
			    buffer[d[i]*2+2] = d[i]+1;
 2ca:	fa 01       	movw	r30, r20
 2cc:	e0 5f       	subi	r30, 0xF0	; 240
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	80 81       	ld	r24, Z
 2d2:	28 2f       	mov	r18, r24
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	f9 01       	movw	r30, r18
 2dc:	e9 5d       	subi	r30, 0xD9	; 217
 2de:	fe 4f       	sbci	r31, 0xFE	; 254
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	80 83       	st	Z, r24
			    
			    // valeur de pin digital
			    if(PIND & (1<<i))
 2e4:	89 b1       	in	r24, 0x09	; 9
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	06 2e       	mov	r0, r22
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <main+0x114>
 2ec:	95 95       	asr	r25
 2ee:	87 95       	ror	r24
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <main+0x110>
 2f4:	f9 01       	movw	r30, r18
 2f6:	80 ff       	sbrs	r24, 0
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <main+0x126>
			      buffer[d[i]*2+3] = 0;
 2fa:	eb 5d       	subi	r30, 0xDB	; 219
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	13 82       	std	Z+3, r1	; 0x03
 300:	03 c0       	rjmp	.+6      	; 0x308 <main+0x12c>
			    else 
			      buffer[d[i]*2+3] = 1;
 302:	eb 5d       	subi	r30, 0xDB	; 219
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	13 83       	std	Z+3, r17	; 0x03
			  }

			  // Pin F
			  if (f[i] != -1) {
			    buffer[f[i]*2+2] = f[i]+1;
 308:	fa 01       	movw	r30, r20
 30a:	e8 5e       	subi	r30, 0xE8	; 232
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	80 81       	ld	r24, Z
 310:	28 2f       	mov	r18, r24
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	f9 01       	movw	r30, r18
 31a:	e9 5d       	subi	r30, 0xD9	; 217
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 83       	st	Z, r24
			    
			    // valeur de pin digital
			    if(PINF & (1<<i))
 322:	8f b1       	in	r24, 0x0f	; 15
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <main+0x150>
 328:	95 95       	asr	r25
 32a:	87 95       	ror	r24
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <main+0x14c>
 330:	f9 01       	movw	r30, r18
 332:	80 ff       	sbrs	r24, 0
 334:	04 c0       	rjmp	.+8      	; 0x33e <main+0x162>
			      buffer[f[i]*2+3] = 0;
 336:	eb 5d       	subi	r30, 0xDB	; 219
 338:	fe 4f       	sbci	r31, 0xFE	; 254
 33a:	13 82       	std	Z+3, r1	; 0x03
 33c:	03 c0       	rjmp	.+6      	; 0x344 <main+0x168>
			    else 
			      buffer[f[i]*2+3] = 1;
 33e:	eb 5d       	subi	r30, 0xDB	; 219
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	13 83       	std	Z+3, r17	; 0x03
 344:	4f 5f       	subi	r20, 0xFF	; 255
 346:	5f 4f       	sbci	r21, 0xFF	; 255
			buffer[0] = 0xAB;
			buffer[1] = 0xCD;


 			// put A/D measurements into next 24 bytes
			for (i=0; i<8 ; i++) {
 348:	48 30       	cpi	r20, 0x08	; 8
 34a:	51 05       	cpc	r21, r1
 34c:	09 f0       	breq	.+2      	; 0x350 <main+0x174>
 34e:	7e cf       	rjmp	.-260    	; 0x24c <main+0x70>
 350:	e7 e5       	ldi	r30, 0x57	; 87
 352:	f1 e0       	ldi	r31, 0x01	; 1
						}*/


			// most of the packet filled with zero
			for (i=50; i<62; i++) {
			  buffer[i] = 0;
 354:	11 92       	st	Z+, r1
						buffer[i] = 0;
						}*/


			// most of the packet filled with zero
			for (i=50; i<62; i++) {
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	e3 36       	cpi	r30, 0x63	; 99
 35a:	f8 07       	cpc	r31, r24
 35c:	d9 f7       	brne	.-10     	; 0x354 <main+0x178>
			  buffer[i] = 0;
			}

			// put a count in the last 2 bytes
			buffer[62] = count >> 8;
 35e:	d0 83       	st	Z, r29
			buffer[63] = count & 255;
 360:	c1 83       	std	Z+1, r28	; 0x01
			// send the packet
			usb_rawhid_send(buffer, 50);
 362:	cf 01       	movw	r24, r30
 364:	ce 97       	sbiw	r24, 0x3e	; 62
 366:	62 e3       	ldi	r22, 0x32	; 50
 368:	1c d0       	rcall	.+56     	; 0x3a2 <usb_rawhid_send>
			count++;
 36a:	21 96       	adiw	r28, 0x01	; 1
 36c:	63 cf       	rjmp	.-314    	; 0x234 <main+0x58>

0000036e <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 374:	80 ea       	ldi	r24, 0xA0	; 160
 376:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 37a:	82 e1       	ldi	r24, 0x12	; 18
 37c:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 37e:	09 b4       	in	r0, 0x29	; 41
 380:	00 fe       	sbrs	r0, 0
 382:	fd cf       	rjmp	.-6      	; 0x37e <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 384:	80 e9       	ldi	r24, 0x90	; 144
 386:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 38a:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 38e:	10 92 22 01 	sts	0x0122, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 392:	8c e0       	ldi	r24, 0x0C	; 12
 394:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 398:	78 94       	sei
}
 39a:	08 95       	ret

0000039c <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 39c:	80 91 22 01 	lds	r24, 0x0122
}
 3a0:	08 95       	ret

000003a2 <usb_rawhid_send>:
	return RAWHID_RX_SIZE;
}

// send a packet, with timeout
int8_t usb_rawhid_send(const uint8_t *buffer, uint8_t timeout)
{
 3a2:	dc 01       	movw	r26, r24
	uint8_t intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 3a4:	80 91 22 01 	lds	r24, 0x0122
 3a8:	88 23       	and	r24, r24
 3aa:	09 f4       	brne	.+2      	; 0x3ae <usb_rawhid_send+0xc>
 3ac:	7a c1       	rjmp	.+756    	; 0x6a2 <usb_rawhid_send+0x300>
	intr_state = SREG;
 3ae:	2f b7       	in	r18, 0x3f	; 63
	cli();
 3b0:	f8 94       	cli
	tx_timeout_count = timeout;
 3b2:	60 93 24 01 	sts	0x0124, r22
	UENUM = RAWHID_TX_ENDPOINT;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 e9 00 	sts	0x00E9, r24
		SREG = intr_state;
		if (tx_timeout_count == 0) return 0;
		if (!usb_configuration) return -1;
		intr_state = SREG;
		cli();
		UENUM = RAWHID_TX_ENDPOINT;
 3bc:	91 e0       	ldi	r25, 0x01	; 1
	cli();
	tx_timeout_count = timeout;
	UENUM = RAWHID_TX_ENDPOINT;
	// wait for the FIFO to be ready to accept data
	while (1) {
		if (UEINTX & (1<<RWAL)) break;
 3be:	80 91 e8 00 	lds	r24, 0x00E8
 3c2:	85 fd       	sbrc	r24, 5
 3c4:	10 c0       	rjmp	.+32     	; 0x3e6 <usb_rawhid_send+0x44>
		SREG = intr_state;
 3c6:	2f bf       	out	0x3f, r18	; 63
		if (tx_timeout_count == 0) return 0;
 3c8:	80 91 24 01 	lds	r24, 0x0124
 3cc:	88 23       	and	r24, r24
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <usb_rawhid_send+0x30>
 3d0:	69 c1       	rjmp	.+722    	; 0x6a4 <usb_rawhid_send+0x302>
		if (!usb_configuration) return -1;
 3d2:	80 91 22 01 	lds	r24, 0x0122
 3d6:	88 23       	and	r24, r24
 3d8:	09 f4       	brne	.+2      	; 0x3dc <usb_rawhid_send+0x3a>
 3da:	63 c1       	rjmp	.+710    	; 0x6a2 <usb_rawhid_send+0x300>
		intr_state = SREG;
 3dc:	2f b7       	in	r18, 0x3f	; 63
		cli();
 3de:	f8 94       	cli
		UENUM = RAWHID_TX_ENDPOINT;
 3e0:	90 93 e9 00 	sts	0x00E9, r25
 3e4:	ec cf       	rjmp	.-40     	; 0x3be <usb_rawhid_send+0x1c>
	}
	// write bytes from the FIFO
	#if (RAWHID_TX_SIZE >= 64)
	UEDATX = *buffer++;
 3e6:	fd 01       	movw	r30, r26
 3e8:	81 91       	ld	r24, Z+
 3ea:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	#if (RAWHID_TX_SIZE >= 63)
	UEDATX = *buffer++;
 3ee:	11 96       	adiw	r26, 0x01	; 1
 3f0:	8c 91       	ld	r24, X
 3f2:	80 93 f1 00 	sts	0x00F1, r24
 3f6:	df 01       	movw	r26, r30
 3f8:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 62)
	UEDATX = *buffer++;
 3fa:	81 81       	ldd	r24, Z+1	; 0x01
 3fc:	80 93 f1 00 	sts	0x00F1, r24
 400:	fd 01       	movw	r30, r26
 402:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 61)
	UEDATX = *buffer++;
 404:	11 96       	adiw	r26, 0x01	; 1
 406:	8c 91       	ld	r24, X
 408:	80 93 f1 00 	sts	0x00F1, r24
 40c:	df 01       	movw	r26, r30
 40e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 60)
	UEDATX = *buffer++;
 410:	81 81       	ldd	r24, Z+1	; 0x01
 412:	80 93 f1 00 	sts	0x00F1, r24
 416:	fd 01       	movw	r30, r26
 418:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 59)
	UEDATX = *buffer++;
 41a:	11 96       	adiw	r26, 0x01	; 1
 41c:	8c 91       	ld	r24, X
 41e:	80 93 f1 00 	sts	0x00F1, r24
 422:	df 01       	movw	r26, r30
 424:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 58)
	UEDATX = *buffer++;
 426:	81 81       	ldd	r24, Z+1	; 0x01
 428:	80 93 f1 00 	sts	0x00F1, r24
 42c:	fd 01       	movw	r30, r26
 42e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 57)
	UEDATX = *buffer++;
 430:	11 96       	adiw	r26, 0x01	; 1
 432:	8c 91       	ld	r24, X
 434:	80 93 f1 00 	sts	0x00F1, r24
 438:	df 01       	movw	r26, r30
 43a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 56)
	UEDATX = *buffer++;
 43c:	81 81       	ldd	r24, Z+1	; 0x01
 43e:	80 93 f1 00 	sts	0x00F1, r24
 442:	fd 01       	movw	r30, r26
 444:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 55)
	UEDATX = *buffer++;
 446:	11 96       	adiw	r26, 0x01	; 1
 448:	8c 91       	ld	r24, X
 44a:	80 93 f1 00 	sts	0x00F1, r24
 44e:	df 01       	movw	r26, r30
 450:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 54)
	UEDATX = *buffer++;
 452:	81 81       	ldd	r24, Z+1	; 0x01
 454:	80 93 f1 00 	sts	0x00F1, r24
 458:	fd 01       	movw	r30, r26
 45a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 53)
	UEDATX = *buffer++;
 45c:	11 96       	adiw	r26, 0x01	; 1
 45e:	8c 91       	ld	r24, X
 460:	80 93 f1 00 	sts	0x00F1, r24
 464:	df 01       	movw	r26, r30
 466:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 52)
	UEDATX = *buffer++;
 468:	81 81       	ldd	r24, Z+1	; 0x01
 46a:	80 93 f1 00 	sts	0x00F1, r24
 46e:	fd 01       	movw	r30, r26
 470:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 51)
	UEDATX = *buffer++;
 472:	11 96       	adiw	r26, 0x01	; 1
 474:	8c 91       	ld	r24, X
 476:	80 93 f1 00 	sts	0x00F1, r24
 47a:	df 01       	movw	r26, r30
 47c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 50)
	UEDATX = *buffer++;
 47e:	81 81       	ldd	r24, Z+1	; 0x01
 480:	80 93 f1 00 	sts	0x00F1, r24
 484:	fd 01       	movw	r30, r26
 486:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 49)
	UEDATX = *buffer++;
 488:	11 96       	adiw	r26, 0x01	; 1
 48a:	8c 91       	ld	r24, X
 48c:	80 93 f1 00 	sts	0x00F1, r24
 490:	df 01       	movw	r26, r30
 492:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 48)
	UEDATX = *buffer++;
 494:	81 81       	ldd	r24, Z+1	; 0x01
 496:	80 93 f1 00 	sts	0x00F1, r24
 49a:	fd 01       	movw	r30, r26
 49c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 47)
	UEDATX = *buffer++;
 49e:	11 96       	adiw	r26, 0x01	; 1
 4a0:	8c 91       	ld	r24, X
 4a2:	80 93 f1 00 	sts	0x00F1, r24
 4a6:	df 01       	movw	r26, r30
 4a8:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 46)
	UEDATX = *buffer++;
 4aa:	81 81       	ldd	r24, Z+1	; 0x01
 4ac:	80 93 f1 00 	sts	0x00F1, r24
 4b0:	fd 01       	movw	r30, r26
 4b2:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 45)
	UEDATX = *buffer++;
 4b4:	11 96       	adiw	r26, 0x01	; 1
 4b6:	8c 91       	ld	r24, X
 4b8:	80 93 f1 00 	sts	0x00F1, r24
 4bc:	df 01       	movw	r26, r30
 4be:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 44)
	UEDATX = *buffer++;
 4c0:	81 81       	ldd	r24, Z+1	; 0x01
 4c2:	80 93 f1 00 	sts	0x00F1, r24
 4c6:	fd 01       	movw	r30, r26
 4c8:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 43)
	UEDATX = *buffer++;
 4ca:	11 96       	adiw	r26, 0x01	; 1
 4cc:	8c 91       	ld	r24, X
 4ce:	80 93 f1 00 	sts	0x00F1, r24
 4d2:	df 01       	movw	r26, r30
 4d4:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 42)
	UEDATX = *buffer++;
 4d6:	81 81       	ldd	r24, Z+1	; 0x01
 4d8:	80 93 f1 00 	sts	0x00F1, r24
 4dc:	fd 01       	movw	r30, r26
 4de:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 41)
	UEDATX = *buffer++;
 4e0:	11 96       	adiw	r26, 0x01	; 1
 4e2:	8c 91       	ld	r24, X
 4e4:	80 93 f1 00 	sts	0x00F1, r24
 4e8:	df 01       	movw	r26, r30
 4ea:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 40)
	UEDATX = *buffer++;
 4ec:	81 81       	ldd	r24, Z+1	; 0x01
 4ee:	80 93 f1 00 	sts	0x00F1, r24
 4f2:	fd 01       	movw	r30, r26
 4f4:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 39)
	UEDATX = *buffer++;
 4f6:	11 96       	adiw	r26, 0x01	; 1
 4f8:	8c 91       	ld	r24, X
 4fa:	80 93 f1 00 	sts	0x00F1, r24
 4fe:	df 01       	movw	r26, r30
 500:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 38)
	UEDATX = *buffer++;
 502:	81 81       	ldd	r24, Z+1	; 0x01
 504:	80 93 f1 00 	sts	0x00F1, r24
 508:	fd 01       	movw	r30, r26
 50a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 37)
	UEDATX = *buffer++;
 50c:	11 96       	adiw	r26, 0x01	; 1
 50e:	8c 91       	ld	r24, X
 510:	80 93 f1 00 	sts	0x00F1, r24
 514:	df 01       	movw	r26, r30
 516:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 36)
	UEDATX = *buffer++;
 518:	81 81       	ldd	r24, Z+1	; 0x01
 51a:	80 93 f1 00 	sts	0x00F1, r24
 51e:	fd 01       	movw	r30, r26
 520:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 35)
	UEDATX = *buffer++;
 522:	11 96       	adiw	r26, 0x01	; 1
 524:	8c 91       	ld	r24, X
 526:	80 93 f1 00 	sts	0x00F1, r24
 52a:	df 01       	movw	r26, r30
 52c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 34)
	UEDATX = *buffer++;
 52e:	81 81       	ldd	r24, Z+1	; 0x01
 530:	80 93 f1 00 	sts	0x00F1, r24
 534:	fd 01       	movw	r30, r26
 536:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 33)
	UEDATX = *buffer++;
 538:	11 96       	adiw	r26, 0x01	; 1
 53a:	8c 91       	ld	r24, X
 53c:	80 93 f1 00 	sts	0x00F1, r24
 540:	df 01       	movw	r26, r30
 542:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 32)
	UEDATX = *buffer++;
 544:	81 81       	ldd	r24, Z+1	; 0x01
 546:	80 93 f1 00 	sts	0x00F1, r24
 54a:	fd 01       	movw	r30, r26
 54c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 31)
	UEDATX = *buffer++;
 54e:	11 96       	adiw	r26, 0x01	; 1
 550:	8c 91       	ld	r24, X
 552:	80 93 f1 00 	sts	0x00F1, r24
 556:	df 01       	movw	r26, r30
 558:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 30)
	UEDATX = *buffer++;
 55a:	81 81       	ldd	r24, Z+1	; 0x01
 55c:	80 93 f1 00 	sts	0x00F1, r24
 560:	fd 01       	movw	r30, r26
 562:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 29)
	UEDATX = *buffer++;
 564:	11 96       	adiw	r26, 0x01	; 1
 566:	8c 91       	ld	r24, X
 568:	80 93 f1 00 	sts	0x00F1, r24
 56c:	df 01       	movw	r26, r30
 56e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 28)
	UEDATX = *buffer++;
 570:	81 81       	ldd	r24, Z+1	; 0x01
 572:	80 93 f1 00 	sts	0x00F1, r24
 576:	fd 01       	movw	r30, r26
 578:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 27)
	UEDATX = *buffer++;
 57a:	11 96       	adiw	r26, 0x01	; 1
 57c:	8c 91       	ld	r24, X
 57e:	80 93 f1 00 	sts	0x00F1, r24
 582:	df 01       	movw	r26, r30
 584:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 26)
	UEDATX = *buffer++;
 586:	81 81       	ldd	r24, Z+1	; 0x01
 588:	80 93 f1 00 	sts	0x00F1, r24
 58c:	fd 01       	movw	r30, r26
 58e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 25)
	UEDATX = *buffer++;
 590:	11 96       	adiw	r26, 0x01	; 1
 592:	8c 91       	ld	r24, X
 594:	80 93 f1 00 	sts	0x00F1, r24
 598:	df 01       	movw	r26, r30
 59a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 24)
	UEDATX = *buffer++;
 59c:	81 81       	ldd	r24, Z+1	; 0x01
 59e:	80 93 f1 00 	sts	0x00F1, r24
 5a2:	fd 01       	movw	r30, r26
 5a4:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 23)
	UEDATX = *buffer++;
 5a6:	11 96       	adiw	r26, 0x01	; 1
 5a8:	8c 91       	ld	r24, X
 5aa:	80 93 f1 00 	sts	0x00F1, r24
 5ae:	df 01       	movw	r26, r30
 5b0:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 22)
	UEDATX = *buffer++;
 5b2:	81 81       	ldd	r24, Z+1	; 0x01
 5b4:	80 93 f1 00 	sts	0x00F1, r24
 5b8:	fd 01       	movw	r30, r26
 5ba:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 21)
	UEDATX = *buffer++;
 5bc:	11 96       	adiw	r26, 0x01	; 1
 5be:	8c 91       	ld	r24, X
 5c0:	80 93 f1 00 	sts	0x00F1, r24
 5c4:	df 01       	movw	r26, r30
 5c6:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 20)
	UEDATX = *buffer++;
 5c8:	81 81       	ldd	r24, Z+1	; 0x01
 5ca:	80 93 f1 00 	sts	0x00F1, r24
 5ce:	fd 01       	movw	r30, r26
 5d0:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 19)
	UEDATX = *buffer++;
 5d2:	11 96       	adiw	r26, 0x01	; 1
 5d4:	8c 91       	ld	r24, X
 5d6:	80 93 f1 00 	sts	0x00F1, r24
 5da:	df 01       	movw	r26, r30
 5dc:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 18)
	UEDATX = *buffer++;
 5de:	81 81       	ldd	r24, Z+1	; 0x01
 5e0:	80 93 f1 00 	sts	0x00F1, r24
 5e4:	fd 01       	movw	r30, r26
 5e6:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 17)
	UEDATX = *buffer++;
 5e8:	11 96       	adiw	r26, 0x01	; 1
 5ea:	8c 91       	ld	r24, X
 5ec:	80 93 f1 00 	sts	0x00F1, r24
 5f0:	df 01       	movw	r26, r30
 5f2:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 16)
	UEDATX = *buffer++;
 5f4:	81 81       	ldd	r24, Z+1	; 0x01
 5f6:	80 93 f1 00 	sts	0x00F1, r24
 5fa:	fd 01       	movw	r30, r26
 5fc:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 15)
	UEDATX = *buffer++;
 5fe:	11 96       	adiw	r26, 0x01	; 1
 600:	8c 91       	ld	r24, X
 602:	80 93 f1 00 	sts	0x00F1, r24
 606:	df 01       	movw	r26, r30
 608:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 14)
	UEDATX = *buffer++;
 60a:	81 81       	ldd	r24, Z+1	; 0x01
 60c:	80 93 f1 00 	sts	0x00F1, r24
 610:	fd 01       	movw	r30, r26
 612:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 13)
	UEDATX = *buffer++;
 614:	11 96       	adiw	r26, 0x01	; 1
 616:	8c 91       	ld	r24, X
 618:	80 93 f1 00 	sts	0x00F1, r24
 61c:	df 01       	movw	r26, r30
 61e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 12)
	UEDATX = *buffer++;
 620:	81 81       	ldd	r24, Z+1	; 0x01
 622:	80 93 f1 00 	sts	0x00F1, r24
 626:	fd 01       	movw	r30, r26
 628:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 11)
	UEDATX = *buffer++;
 62a:	11 96       	adiw	r26, 0x01	; 1
 62c:	8c 91       	ld	r24, X
 62e:	80 93 f1 00 	sts	0x00F1, r24
 632:	df 01       	movw	r26, r30
 634:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 10)
	UEDATX = *buffer++;
 636:	81 81       	ldd	r24, Z+1	; 0x01
 638:	80 93 f1 00 	sts	0x00F1, r24
 63c:	fd 01       	movw	r30, r26
 63e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 9)
	UEDATX = *buffer++;
 640:	11 96       	adiw	r26, 0x01	; 1
 642:	8c 91       	ld	r24, X
 644:	80 93 f1 00 	sts	0x00F1, r24
 648:	df 01       	movw	r26, r30
 64a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 8)
	UEDATX = *buffer++;
 64c:	81 81       	ldd	r24, Z+1	; 0x01
 64e:	80 93 f1 00 	sts	0x00F1, r24
 652:	fd 01       	movw	r30, r26
 654:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 7)
	UEDATX = *buffer++;
 656:	11 96       	adiw	r26, 0x01	; 1
 658:	8c 91       	ld	r24, X
 65a:	80 93 f1 00 	sts	0x00F1, r24
 65e:	df 01       	movw	r26, r30
 660:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 6)
	UEDATX = *buffer++;
 662:	81 81       	ldd	r24, Z+1	; 0x01
 664:	80 93 f1 00 	sts	0x00F1, r24
 668:	fd 01       	movw	r30, r26
 66a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 5)
	UEDATX = *buffer++;
 66c:	11 96       	adiw	r26, 0x01	; 1
 66e:	8c 91       	ld	r24, X
 670:	80 93 f1 00 	sts	0x00F1, r24
 674:	df 01       	movw	r26, r30
 676:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 4)
	UEDATX = *buffer++;
 678:	81 81       	ldd	r24, Z+1	; 0x01
 67a:	80 93 f1 00 	sts	0x00F1, r24
 67e:	fd 01       	movw	r30, r26
 680:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 3)
	UEDATX = *buffer++;
 682:	11 96       	adiw	r26, 0x01	; 1
 684:	8c 91       	ld	r24, X
 686:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	#if (RAWHID_TX_SIZE >= 2)
	UEDATX = *buffer++;
 68a:	81 81       	ldd	r24, Z+1	; 0x01
 68c:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	#if (RAWHID_TX_SIZE >= 1)
	UEDATX = *buffer++;
 690:	82 81       	ldd	r24, Z+2	; 0x02
 692:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	// transmit it now
	UEINTX = 0x3A;
 696:	8a e3       	ldi	r24, 0x3A	; 58
 698:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
 69c:	2f bf       	out	0x3f, r18	; 63
 69e:	80 e4       	ldi	r24, 0x40	; 64
 6a0:	08 95       	ret
	return RAWHID_TX_SIZE;
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
}
 6a4:	08 95       	ret

000006a6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 6a6:	1f 92       	push	r1
 6a8:	0f 92       	push	r0
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	0f 92       	push	r0
 6ae:	11 24       	eor	r1, r1
 6b0:	8f 93       	push	r24
 6b2:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 6b4:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 6b8:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 6bc:	98 2f       	mov	r25, r24
 6be:	93 ff       	sbrs	r25, 3
 6c0:	0f c0       	rjmp	.+30     	; 0x6e0 <__vector_10+0x3a>
		UENUM = 0;
 6c2:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 6cc:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 6d0:	82 e2       	ldi	r24, 0x22	; 34
 6d2:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 6d6:	88 e0       	ldi	r24, 0x08	; 8
 6d8:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 6dc:	10 92 22 01 	sts	0x0122, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 6e0:	92 ff       	sbrs	r25, 2
 6e2:	12 c0       	rjmp	.+36     	; 0x708 <__vector_10+0x62>
 6e4:	80 91 22 01 	lds	r24, 0x0122
 6e8:	88 23       	and	r24, r24
 6ea:	71 f0       	breq	.+28     	; 0x708 <__vector_10+0x62>
		t = rx_timeout_count;
 6ec:	80 91 23 01 	lds	r24, 0x0123
		if (t) rx_timeout_count = --t;
 6f0:	88 23       	and	r24, r24
 6f2:	19 f0       	breq	.+6      	; 0x6fa <__vector_10+0x54>
 6f4:	81 50       	subi	r24, 0x01	; 1
 6f6:	80 93 23 01 	sts	0x0123, r24
		t = tx_timeout_count;
 6fa:	80 91 24 01 	lds	r24, 0x0124
		if (t) tx_timeout_count = --t;
 6fe:	88 23       	and	r24, r24
 700:	19 f0       	breq	.+6      	; 0x708 <__vector_10+0x62>
 702:	81 50       	subi	r24, 0x01	; 1
 704:	80 93 24 01 	sts	0x0124, r24
	}
}
 708:	9f 91       	pop	r25
 70a:	8f 91       	pop	r24
 70c:	0f 90       	pop	r0
 70e:	0f be       	out	0x3f, r0	; 63
 710:	0f 90       	pop	r0
 712:	1f 90       	pop	r1
 714:	18 95       	reti

00000716 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 716:	1f 92       	push	r1
 718:	0f 92       	push	r0
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	0f 92       	push	r0
 71e:	11 24       	eor	r1, r1
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	2f 93       	push	r18
 726:	3f 93       	push	r19
 728:	4f 93       	push	r20
 72a:	5f 93       	push	r21
 72c:	6f 93       	push	r22
 72e:	7f 93       	push	r23
 730:	8f 93       	push	r24
 732:	9f 93       	push	r25
 734:	af 93       	push	r26
 736:	bf 93       	push	r27
 738:	ef 93       	push	r30
 73a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 73c:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
 740:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 744:	83 ff       	sbrs	r24, 3
 746:	42 c1       	rjmp	.+644    	; 0x9cc <__vector_11+0x2b6>
                bmRequestType = UEDATX;
 748:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 74c:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 750:	80 91 f1 00 	lds	r24, 0x00F1
 754:	a8 2f       	mov	r26, r24
 756:	b0 e0       	ldi	r27, 0x00	; 0
                wValue |= (UEDATX << 8);
 758:	20 91 f1 00 	lds	r18, 0x00F1
 75c:	92 2f       	mov	r25, r18
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	a8 2b       	or	r26, r24
 762:	b9 2b       	or	r27, r25
                wIndex = UEDATX;
 764:	80 91 f1 00 	lds	r24, 0x00F1
 768:	68 2f       	mov	r22, r24
 76a:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 76c:	20 91 f1 00 	lds	r18, 0x00F1
 770:	92 2f       	mov	r25, r18
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	68 2b       	or	r22, r24
 776:	79 2b       	or	r23, r25
                wLength = UEDATX;
 778:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
 77c:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 780:	82 ef       	ldi	r24, 0xF2	; 242
 782:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 786:	36 30       	cpi	r19, 0x06	; 6
 788:	09 f0       	breq	.+2      	; 0x78c <__vector_11+0x76>
 78a:	5a c0       	rjmp	.+180    	; 0x840 <__vector_11+0x12a>
 78c:	23 eb       	ldi	r18, 0xB3	; 179
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	a9 01       	movw	r20, r18
 792:	45 50       	subi	r20, 0x05	; 5
 794:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 796:	f9 01       	movw	r30, r18
 798:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 79a:	85 91       	lpm	r24, Z+
 79c:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 79e:	8a 17       	cp	r24, r26
 7a0:	9b 07       	cpc	r25, r27
 7a2:	01 f5       	brne	.+64     	; 0x7e4 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 7a4:	fa 01       	movw	r30, r20
 7a6:	85 91       	lpm	r24, Z+
 7a8:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 7aa:	86 17       	cp	r24, r22
 7ac:	97 07       	cpc	r25, r23
 7ae:	d1 f4       	brne	.+52     	; 0x7e4 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 7b0:	9a 01       	movw	r18, r20
 7b2:	2e 5f       	subi	r18, 0xFE	; 254
 7b4:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 7b6:	f9 01       	movw	r30, r18
 7b8:	65 91       	lpm	r22, Z+
 7ba:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 7bc:	2e 5f       	subi	r18, 0xFE	; 254
 7be:	3f 4f       	sbci	r19, 0xFF	; 255
 7c0:	f9 01       	movw	r30, r18
 7c2:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 7c4:	21 2f       	mov	r18, r17
 7c6:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 7c8:	90 2f       	mov	r25, r16
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	28 2b       	or	r18, r24
 7ce:	39 2b       	or	r19, r25
 7d0:	2f 3f       	cpi	r18, 0xFF	; 255
 7d2:	31 05       	cpc	r19, r1
 7d4:	19 f0       	breq	.+6      	; 0x7dc <__vector_11+0xc6>
 7d6:	10 f0       	brcs	.+4      	; 0x7dc <__vector_11+0xc6>
 7d8:	2f ef       	ldi	r18, 0xFF	; 255
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	24 17       	cp	r18, r20
 7de:	58 f4       	brcc	.+22     	; 0x7f6 <__vector_11+0xe0>
 7e0:	42 2f       	mov	r20, r18
 7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <__vector_11+0xe0>
 7e4:	29 5f       	subi	r18, 0xF9	; 249
 7e6:	3f 4f       	sbci	r19, 0xFF	; 255
 7e8:	49 5f       	subi	r20, 0xF9	; 249
 7ea:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	24 3e       	cpi	r18, 0xE4	; 228
 7f0:	3f 07       	cpc	r19, r31
 7f2:	89 f6       	brne	.-94     	; 0x796 <__vector_11+0x80>
 7f4:	eb c0       	rjmp	.+470    	; 0x9cc <__vector_11+0x2b6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7f6:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 7f8:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 7fc:	28 2f       	mov	r18, r24
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	c9 01       	movw	r24, r18
 802:	85 70       	andi	r24, 0x05	; 5
 804:	90 70       	andi	r25, 0x00	; 0
 806:	89 2b       	or	r24, r25
 808:	b9 f3       	breq	.-18     	; 0x7f8 <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
 80a:	22 fd       	sbrc	r18, 2
 80c:	e2 c0       	rjmp	.+452    	; 0x9d2 <__vector_11+0x2bc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 80e:	34 2f       	mov	r19, r20
 810:	41 32       	cpi	r20, 0x21	; 33
 812:	08 f0       	brcs	.+2      	; 0x816 <__vector_11+0x100>
 814:	30 e2       	ldi	r19, 0x20	; 32
 816:	cb 01       	movw	r24, r22
 818:	23 2f       	mov	r18, r19
 81a:	06 c0       	rjmp	.+12     	; 0x828 <__vector_11+0x112>
				for (i = n; i; i--) {
 81c:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 81e:	01 96       	adiw	r24, 0x01	; 1
 820:	e4 91       	lpm	r30, Z+
 822:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 826:	21 50       	subi	r18, 0x01	; 1
 828:	22 23       	and	r18, r18
 82a:	c1 f7       	brne	.-16     	; 0x81c <__vector_11+0x106>
 82c:	63 0f       	add	r22, r19
 82e:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 830:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 832:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 836:	44 23       	and	r20, r20
 838:	f9 f6       	brne	.-66     	; 0x7f8 <__vector_11+0xe2>
 83a:	30 32       	cpi	r19, 0x20	; 32
 83c:	e9 f2       	breq	.-70     	; 0x7f8 <__vector_11+0xe2>
 83e:	c9 c0       	rjmp	.+402    	; 0x9d2 <__vector_11+0x2bc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 840:	35 30       	cpi	r19, 0x05	; 5
 842:	61 f4       	brne	.+24     	; 0x85c <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 844:	8e ef       	ldi	r24, 0xFE	; 254
 846:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 84a:	80 91 e8 00 	lds	r24, 0x00E8
 84e:	80 ff       	sbrs	r24, 0
 850:	fc cf       	rjmp	.-8      	; 0x84a <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 852:	8a 2f       	mov	r24, r26
 854:	80 68       	ori	r24, 0x80	; 128
 856:	80 93 e3 00 	sts	0x00E3, r24
 85a:	bb c0       	rjmp	.+374    	; 0x9d2 <__vector_11+0x2bc>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 85c:	39 30       	cpi	r19, 0x09	; 9
 85e:	31 f5       	brne	.+76     	; 0x8ac <__vector_11+0x196>
 860:	44 23       	and	r20, r20
 862:	09 f0       	breq	.+2      	; 0x866 <__vector_11+0x150>
 864:	72 c0       	rjmp	.+228    	; 0x94a <__vector_11+0x234>
			usb_configuration = wValue;
 866:	a0 93 22 01 	sts	0x0122, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 86a:	8e ef       	ldi	r24, 0xFE	; 254
 86c:	80 93 e8 00 	sts	0x00E8, r24
 870:	8d ed       	ldi	r24, 0xDD	; 221
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 876:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 87a:	fc 01       	movw	r30, r24
 87c:	01 96       	adiw	r24, 0x01	; 1
 87e:	e4 91       	lpm	r30, Z+
				UECONX = en;
 880:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 884:	ee 23       	and	r30, r30
 886:	69 f0       	breq	.+26     	; 0x8a2 <__vector_11+0x18c>
					UECFG0X = pgm_read_byte(cfg++);
 888:	ac 01       	movw	r20, r24
 88a:	4f 5f       	subi	r20, 0xFF	; 255
 88c:	5f 4f       	sbci	r21, 0xFF	; 255
 88e:	fc 01       	movw	r30, r24
 890:	84 91       	lpm	r24, Z+
 892:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 896:	ca 01       	movw	r24, r20
 898:	01 96       	adiw	r24, 0x01	; 1
 89a:	fa 01       	movw	r30, r20
 89c:	34 91       	lpm	r19, Z+
 89e:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 8a2:	2f 5f       	subi	r18, 0xFF	; 255
 8a4:	25 30       	cpi	r18, 0x05	; 5
 8a6:	39 f7       	brne	.-50     	; 0x876 <__vector_11+0x160>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 8a8:	8e e1       	ldi	r24, 0x1E	; 30
 8aa:	4a c0       	rjmp	.+148    	; 0x940 <__vector_11+0x22a>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 8ac:	38 30       	cpi	r19, 0x08	; 8
 8ae:	61 f4       	brne	.+24     	; 0x8c8 <__vector_11+0x1b2>
 8b0:	40 38       	cpi	r20, 0x80	; 128
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <__vector_11+0x1a0>
 8b4:	4a c0       	rjmp	.+148    	; 0x94a <__vector_11+0x234>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 8b6:	80 91 e8 00 	lds	r24, 0x00E8
 8ba:	80 ff       	sbrs	r24, 0
 8bc:	fc cf       	rjmp	.-8      	; 0x8b6 <__vector_11+0x1a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 8be:	80 91 22 01 	lds	r24, 0x0122
 8c2:	80 93 f1 00 	sts	0x00F1, r24
 8c6:	7e c0       	rjmp	.+252    	; 0x9c4 <__vector_11+0x2ae>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 8c8:	33 23       	and	r19, r19
 8ca:	d1 f4       	brne	.+52     	; 0x900 <__vector_11+0x1ea>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 8cc:	80 91 e8 00 	lds	r24, 0x00E8
 8d0:	80 ff       	sbrs	r24, 0
 8d2:	fc cf       	rjmp	.-8      	; 0x8cc <__vector_11+0x1b6>
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			if (bmRequestType == 0x82) {
 8d4:	42 38       	cpi	r20, 0x82	; 130
 8d6:	11 f0       	breq	.+4      	; 0x8dc <__vector_11+0x1c6>
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <__vector_11+0x1e0>
				UENUM = wIndex;
 8dc:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 8e0:	80 91 eb 00 	lds	r24, 0x00EB
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	25 e0       	ldi	r18, 0x05	; 5
 8e8:	96 95       	lsr	r25
 8ea:	87 95       	ror	r24
 8ec:	2a 95       	dec	r18
 8ee:	e1 f7       	brne	.-8      	; 0x8e8 <__vector_11+0x1d2>
 8f0:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 8f2:	10 92 e9 00 	sts	0x00E9, r1
			}
			UEDATX = i;
 8f6:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 8fa:	10 92 f1 00 	sts	0x00F1, r1
 8fe:	62 c0       	rjmp	.+196    	; 0x9c4 <__vector_11+0x2ae>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 900:	31 30       	cpi	r19, 0x01	; 1
 902:	11 f0       	breq	.+4      	; 0x908 <__vector_11+0x1f2>
 904:	33 30       	cpi	r19, 0x03	; 3
 906:	09 f5       	brne	.+66     	; 0x94a <__vector_11+0x234>
 908:	42 30       	cpi	r20, 0x02	; 2
 90a:	f9 f4       	brne	.+62     	; 0x94a <__vector_11+0x234>
 90c:	ab 2b       	or	r26, r27
 90e:	e9 f4       	brne	.+58     	; 0x94a <__vector_11+0x234>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 910:	26 2f       	mov	r18, r22
 912:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 914:	82 2f       	mov	r24, r18
 916:	81 50       	subi	r24, 0x01	; 1
 918:	84 30       	cpi	r24, 0x04	; 4
 91a:	b8 f4       	brcc	.+46     	; 0x94a <__vector_11+0x234>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 91c:	8e ef       	ldi	r24, 0xFE	; 254
 91e:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 922:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 926:	33 30       	cpi	r19, 0x03	; 3
 928:	09 f4       	brne	.+2      	; 0x92c <__vector_11+0x216>
 92a:	50 c0       	rjmp	.+160    	; 0x9cc <__vector_11+0x2b6>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 92c:	89 e1       	ldi	r24, 0x19	; 25
 92e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <__vector_11+0x226>
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	2a 95       	dec	r18
 93e:	e2 f7       	brpl	.-8      	; 0x938 <__vector_11+0x222>
 940:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 944:	10 92 ea 00 	sts	0x00EA, r1
 948:	44 c0       	rjmp	.+136    	; 0x9d2 <__vector_11+0x2bc>
				}
				return;
			}
		}
		if (wIndex == RAWHID_INTERFACE) {
 94a:	67 2b       	or	r22, r23
 94c:	09 f0       	breq	.+2      	; 0x950 <__vector_11+0x23a>
 94e:	3e c0       	rjmp	.+124    	; 0x9cc <__vector_11+0x2b6>
			if (bmRequestType == 0xA1 && bRequest == HID_GET_REPORT) {
 950:	41 3a       	cpi	r20, 0xA1	; 161
 952:	11 f5       	brne	.+68     	; 0x998 <__vector_11+0x282>
 954:	31 30       	cpi	r19, 0x01	; 1
 956:	d1 f5       	brne	.+116    	; 0x9cc <__vector_11+0x2b6>
 958:	40 e4       	ldi	r20, 0x40	; 64
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 95a:	5e ef       	ldi	r21, 0xFE	; 254
			if (bmRequestType == 0xA1 && bRequest == HID_GET_REPORT) {
				len = RAWHID_TX_SIZE;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 95c:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 960:	28 2f       	mov	r18, r24
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	c9 01       	movw	r24, r18
 966:	85 70       	andi	r24, 0x05	; 5
 968:	90 70       	andi	r25, 0x00	; 0
 96a:	89 2b       	or	r24, r25
 96c:	b9 f3       	breq	.-18     	; 0x95c <__vector_11+0x246>
					if (i & (1<<RXOUTI)) return;	// abort
 96e:	22 fd       	sbrc	r18, 2
 970:	30 c0       	rjmp	.+96     	; 0x9d2 <__vector_11+0x2bc>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 972:	94 2f       	mov	r25, r20
 974:	41 32       	cpi	r20, 0x21	; 33
 976:	08 f0       	brcs	.+2      	; 0x97a <__vector_11+0x264>
 978:	90 e2       	ldi	r25, 0x20	; 32
 97a:	89 2f       	mov	r24, r25
 97c:	03 c0       	rjmp	.+6      	; 0x984 <__vector_11+0x26e>
					for (i = n; i; i--) {
						// just send zeros
						UEDATX = 0;
 97e:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 982:	81 50       	subi	r24, 0x01	; 1
 984:	88 23       	and	r24, r24
 986:	d9 f7       	brne	.-10     	; 0x97e <__vector_11+0x268>
						// just send zeros
						UEDATX = 0;
					}
					len -= n;
 988:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 98a:	50 93 e8 00 	sts	0x00E8, r21
						// just send zeros
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 98e:	44 23       	and	r20, r20
 990:	29 f7       	brne	.-54     	; 0x95c <__vector_11+0x246>
 992:	90 32       	cpi	r25, 0x20	; 32
 994:	19 f3       	breq	.-58     	; 0x95c <__vector_11+0x246>
 996:	1d c0       	rjmp	.+58     	; 0x9d2 <__vector_11+0x2bc>
				return;
			}
			if (bmRequestType == 0x21 && bRequest == HID_SET_REPORT) {
 998:	41 32       	cpi	r20, 0x21	; 33
 99a:	c1 f4       	brne	.+48     	; 0x9cc <__vector_11+0x2b6>
 99c:	39 30       	cpi	r19, 0x09	; 9
 99e:	b1 f4       	brne	.+44     	; 0x9cc <__vector_11+0x2b6>
 9a0:	90 e4       	ldi	r25, 0x40	; 64
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 9a2:	2b ef       	ldi	r18, 0xFB	; 251
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 9a4:	80 91 e8 00 	lds	r24, 0x00E8
 9a8:	82 ff       	sbrs	r24, 2
 9aa:	fc cf       	rjmp	.-8      	; 0x9a4 <__vector_11+0x28e>
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 9ac:	20 93 e8 00 	sts	0x00E8, r18
				return;
			}
			if (bmRequestType == 0x21 && bRequest == HID_SET_REPORT) {
				len = RAWHID_RX_SIZE;
				do {
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 9b0:	89 2f       	mov	r24, r25
 9b2:	91 32       	cpi	r25, 0x21	; 33
 9b4:	08 f0       	brcs	.+2      	; 0x9b8 <__vector_11+0x2a2>
 9b6:	80 e2       	ldi	r24, 0x20	; 32
					usb_wait_receive_out();
					// ignore incoming bytes
					usb_ack_out();
					len -= n;
 9b8:	98 1b       	sub	r25, r24
				} while (len);
 9ba:	a1 f7       	brne	.-24     	; 0x9a4 <__vector_11+0x28e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 9bc:	80 91 e8 00 	lds	r24, 0x00E8
 9c0:	80 ff       	sbrs	r24, 0
 9c2:	fc cf       	rjmp	.-8      	; 0x9bc <__vector_11+0x2a6>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9c4:	8e ef       	ldi	r24, 0xFE	; 254
 9c6:	80 93 e8 00 	sts	0x00E8, r24
 9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <__vector_11+0x2bc>
				usb_send_in();
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 9cc:	81 e2       	ldi	r24, 0x21	; 33
 9ce:	80 93 eb 00 	sts	0x00EB, r24
}
 9d2:	ff 91       	pop	r31
 9d4:	ef 91       	pop	r30
 9d6:	bf 91       	pop	r27
 9d8:	af 91       	pop	r26
 9da:	9f 91       	pop	r25
 9dc:	8f 91       	pop	r24
 9de:	7f 91       	pop	r23
 9e0:	6f 91       	pop	r22
 9e2:	5f 91       	pop	r21
 9e4:	4f 91       	pop	r20
 9e6:	3f 91       	pop	r19
 9e8:	2f 91       	pop	r18
 9ea:	1f 91       	pop	r17
 9ec:	0f 91       	pop	r16
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	1f 90       	pop	r1
 9f6:	18 95       	reti

000009f8 <_exit>:
 9f8:	f8 94       	cli

000009fa <__stop_program>:
 9fa:	ff cf       	rjmp	.-2      	; 0x9fa <__stop_program>
